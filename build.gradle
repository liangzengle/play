buildscript {
    ext.kotlin_version = '1.4.0'
    repositories {
        mavenLocal()
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven {
            url 'https://maven.aliyun.com/repository/gradle-plugin'
        }
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.2.1"
    }
}

ext {
    netty_version = '4.1.45.Final'
    hibernat_validator_version = '6.1.2.Final'
    javax_el_version = '3.0.0'
    jackson_version = '2.11.2'
    log4j_version = '2.13.0'
    kotlin_logging_version = '1.8.3'
    config_version = '1.4.0'
    vavr_version = '0.10.2'
    guava_version = '28.2-jre'
    auto_service_version = '1.0-rc7'
    guice_version = '4.2.2'
    reflections_version = '0.9.12'
    hikariCP_version = '3.4.2'
    eclipse_collection_version = "10.2.0"
    kotlin_poet_version = '1.6.0'
    akka_typed_version = "2.6.5"
}

ext {
    hibernate_validator = "org.hibernate.validator:hibernate-validator:$hibernat_validator_version"
    netty = [
            "io.netty:netty-all:$netty_version",
            "io.netty:netty-transport-native-epoll:$netty_version"
    ]
    log4j = [
            "io.github.microutils:kotlin-logging:$kotlin_logging_version",
            "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    ]
    config = "com.typesafe:config:$config_version"
    vavr = [
            "io.vavr:vavr:$vavr_version",
            "io.vavr:vavr-kotlin:$vavr_version",
            "io.vavr:vavr-jackson:$vavr_version",
    ]
    guava = "com.google.guava:guava:$guava_version"
    auto_service = "com.google.auto.service:auto-service:$auto_service_version"
    guice = [
            "com.google.inject:guice:$guice_version",
            "com.google.inject.extensions:guice-assistedinject:$guice_version"
    ]
    reflections = "org.reflections:reflections:$reflections_version"
    hikariCP = "com.zaxxer:HikariCP:$hikariCP_version"
    jackson = [
            "com.fasterxml.jackson.datatype:jackson-datatype-guava:$jackson_version"
    ]
    eclipse_collection = [
            "org.eclipse.collections:eclipse-collections:$eclipse_collection_version"
    ]
    kotlin_poet = "com.squareup:kotlinpoet:$kotlin_poet_version"
    akka_typed = [
            "com.typesafe.akka:akka-actor-typed_2.13:$akka_typed_version"
    ]
    javax_el = [
            "javax.el:javax.el-api:$javax_el_version",
            "org.glassfish:javax.el:$javax_el_version"
    ]
}


subprojects {
    repositories {
        mavenLocal()
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven {
            url 'https://maven.aliyun.com/repository/gradle-plugin'
        }
        maven {
            url 'https://maven.aliyun.com/repository/jcenter'
        }
        mavenCentral()
        jcenter()
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap'
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.kotlin.kapt'
    apply plugin: "org.jlleitschuh.gradle.ktlint-idea"

    ktlint {
        debug = true
    }

    group 'play'
    version '1.0-SNAPSHOT'


    dependencies {
        api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = [
                    "-XXLanguage:+InlineClasses",
                    "-Xopt-in=kotlin.RequiresOptIn",
                    "-Xopt-in=kotlin.ExperimentalUnsignedTypes",
                    "-Xopt-in=kotlin.time.ExperimentalTime",
                    "-Xopt-in=kotlin.contracts.ExperimentalContracts",
                    "-Xopt-in=kotlin.experimental.ExperimentalTypeInference",
                    "-Xjvm-default=all"
            ]
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = [
                    "-XXLanguage:+InlineClasses",
                    "-Xopt-in=kotlin.RequiresOptIn",
                    "-Xopt-in=kotlin.ExperimentalUnsignedTypes",
                    "-Xopt-in=kotlin.time.ExperimentalTime",
                    "-Xopt-in=kotlin.contract.ExperimentalContracts",
                    "-Xopt-in=kotlin.experimental.ExperimentalTypeInference",
                    "-Xjvm-default=all"
            ]
        }
    }

    compileJava {
        options.encoding = "UTF-8"
    }

    compileTestJava {
        options.encoding = "UTF-8"
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
//        main.java.srcDirs += "build/generated/source/kaptKotlin/main"
        test.java.srcDirs += "src/test/kotlin"
    }
}